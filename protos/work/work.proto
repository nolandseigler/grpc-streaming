// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/nolandseigler/grpc_streaming/proto/work";

package work;

// The work service definition.
service Work {
  // Starts work task
  rpc StartWork(StartWorkRequest) returns (StartWorkResponse) {}
  // Subscribes to "round robin" status updates where a client may receive a
  // message on the stream from the server. This is used to deliver a message
  // successfully exactly once when we have many client streams all working
  // together to process events. Think many k8s pods all suscribing and the
  // server(s) will load balance the responses instead of broadcasting all
  // events.
  rpc SubscribeToRoundRobinWorkStatus(SubscribeRequest)
      returns (stream WorkStatusResponse) {}
}

enum WorkTask {
  WORK_TASK_UNSPECIFIED = 0;
  WORK_TASK_DANCE = 1;
  WORK_TASK_PLAY = 2;
}

message StartWorkRequest {
  string name = 1;
  WorkTask task = 2;
}

message StartWorkResponse { string work_id = 1; }

message SubscribeRequest { string subscriber_id = 1; }

enum WorkStatus {
  WORK_STATUS_UNSPECIFIED = 0;
  WORK_STATUS_SUCCESS = 1;
  WORK_STATUS_FAILED = 2;
  WORK_STATUS_STARTED = 3;
  WORK_STATUS_IN_PROGRESS = 4;
}

message WorkStatusResponse {
  string work_id = 1;
  WorkStatus status = 2;
}
