// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: protos/work/work.proto

package work

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkClient is the client API for Work service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkClient interface {
	// Starts work task
	StartWork(ctx context.Context, in *StartWorkRequest, opts ...grpc.CallOption) (*StartWorkResponse, error)
	// Subscribes to "round robin" status updates where a client may receive a
	// message on the stream from the server. This is used to deliver a message
	// successfully exactly once when we have many client streams all working
	// together to process events. Think many k8s pods all suscribing and the
	// server(s) will load balance the responses instead of broadcasting all
	// events.
	SubscribeToRoundRobinWorkStatus(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Work_SubscribeToRoundRobinWorkStatusClient, error)
}

type workClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkClient(cc grpc.ClientConnInterface) WorkClient {
	return &workClient{cc}
}

func (c *workClient) StartWork(ctx context.Context, in *StartWorkRequest, opts ...grpc.CallOption) (*StartWorkResponse, error) {
	out := new(StartWorkResponse)
	err := c.cc.Invoke(ctx, "/work.Work/StartWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workClient) SubscribeToRoundRobinWorkStatus(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Work_SubscribeToRoundRobinWorkStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Work_ServiceDesc.Streams[0], "/work.Work/SubscribeToRoundRobinWorkStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &workSubscribeToRoundRobinWorkStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Work_SubscribeToRoundRobinWorkStatusClient interface {
	Recv() (*WorkStatusResponse, error)
	grpc.ClientStream
}

type workSubscribeToRoundRobinWorkStatusClient struct {
	grpc.ClientStream
}

func (x *workSubscribeToRoundRobinWorkStatusClient) Recv() (*WorkStatusResponse, error) {
	m := new(WorkStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkServer is the server API for Work service.
// All implementations must embed UnimplementedWorkServer
// for forward compatibility
type WorkServer interface {
	// Starts work task
	StartWork(context.Context, *StartWorkRequest) (*StartWorkResponse, error)
	// Subscribes to "round robin" status updates where a client may receive a
	// message on the stream from the server. This is used to deliver a message
	// successfully exactly once when we have many client streams all working
	// together to process events. Think many k8s pods all suscribing and the
	// server(s) will load balance the responses instead of broadcasting all
	// events.
	SubscribeToRoundRobinWorkStatus(*SubscribeRequest, Work_SubscribeToRoundRobinWorkStatusServer) error
	mustEmbedUnimplementedWorkServer()
}

// UnimplementedWorkServer must be embedded to have forward compatible implementations.
type UnimplementedWorkServer struct {
}

func (UnimplementedWorkServer) StartWork(context.Context, *StartWorkRequest) (*StartWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWork not implemented")
}
func (UnimplementedWorkServer) SubscribeToRoundRobinWorkStatus(*SubscribeRequest, Work_SubscribeToRoundRobinWorkStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToRoundRobinWorkStatus not implemented")
}
func (UnimplementedWorkServer) mustEmbedUnimplementedWorkServer() {}

// UnsafeWorkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkServer will
// result in compilation errors.
type UnsafeWorkServer interface {
	mustEmbedUnimplementedWorkServer()
}

func RegisterWorkServer(s grpc.ServiceRegistrar, srv WorkServer) {
	s.RegisterService(&Work_ServiceDesc, srv)
}

func _Work_StartWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServer).StartWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/work.Work/StartWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServer).StartWork(ctx, req.(*StartWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Work_SubscribeToRoundRobinWorkStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkServer).SubscribeToRoundRobinWorkStatus(m, &workSubscribeToRoundRobinWorkStatusServer{stream})
}

type Work_SubscribeToRoundRobinWorkStatusServer interface {
	Send(*WorkStatusResponse) error
	grpc.ServerStream
}

type workSubscribeToRoundRobinWorkStatusServer struct {
	grpc.ServerStream
}

func (x *workSubscribeToRoundRobinWorkStatusServer) Send(m *WorkStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Work_ServiceDesc is the grpc.ServiceDesc for Work service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Work_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "work.Work",
	HandlerType: (*WorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWork",
			Handler:    _Work_StartWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToRoundRobinWorkStatus",
			Handler:       _Work_SubscribeToRoundRobinWorkStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/work/work.proto",
}
